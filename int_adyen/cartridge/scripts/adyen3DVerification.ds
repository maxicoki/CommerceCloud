/**
* Passes on credit card details to Adyen 3DS using the Adyen PAL adapter
* version to use in pipeline
* created on 23dec2014
*
* @input Order : dw.order.Order The order.
* @input Amount : dw.value.Money The amount to authorize
* @input PaymentInstrument : dw.order.PaymentInstrument 
* @input CurrentSession : dw.system.Session
* @input CurrentRequest : dw.system.Request
* @input MD : String
* @input PaResponse : String
*
* @output Decision : String 
* @output PaymentStatus : String
* @output AuthorizationCode : String
* @output AuthorizationAmount : String
* @output RequestID : String
* @output RequestToken : String
*/
importPackage( dw.system );
importPackage( dw.order );
importPackage( dw.rpc );
importPackage( dw.util );
importPackage( dw.value );
importPackage( dw.net ); 
importPackage( dw.web ); 
importPackage( dw.crypto ); 
importPackage( dw.svc );
importScript('libs/libAdyen.ds');

//script include
var AdyenHelper = require ("int_adyen/cartridge/scripts/util/AdyenHelper");

function execute( args : PipelineDictionary ) : Number
{
	var result = verify(args);
	if (result == PIPELET_ERROR){
		return PIPELET_ERROR;
	}
	return PIPELET_NEXT;
}

function verify( args : PipelineDictionary ) : Number {
	
	var VERSION : String = "4";
	var MERCHANTACCOUNT : String = Site.getCurrent().getCustomPreferenceValue("Adyen_merchantCode");
	var msg : String = "";
	var order = args.Order;
	
	if (order == null) {
		Logger.getLogger("Adyen").fatal("Notification for not existing order received.");  
		return PIPELET_ERROR;
	}
	
	try	{
		var myAmount : Number = AdyenHelper.getCurrencyValueForApi(args.Amount); //args.Amount * 100;	
		var orderNo : String = args.Order.getOrderNo();	
		var a : Number = Math.floor(Math.random()*10000);
		var c : Object = args.PaymentInstrument;
		
		var currentRequest : Request = (args.CurrentRequest)? args.CurrentRequest : request;
		var acceptHeader : String = currentRequest.httpHeaders.get("accept") + currentRequest.httpHeaders.get("accept-encoding");
		var userAgent : String = currentRequest.httpUserAgent;
		 
		// get shopper ip
		var shopperIp = currentRequest.getHttpRemoteAddress();
		if (shopperIp == null) { shopperIp = ''; }
		 
		// set-up the 3D Secure post call
	   	var jsonRequest : JSON = {
		  "browserInfo": {
		    "acceptHeader": acceptHeader,
		    "userAgent": userAgent
		  },
		  "md": args.MD,
		  "merchantAccount": MERCHANTACCOUNT,
		  "paResponse": args.PaResponse,
		  "shopperEmail": order.customerEmail,
		  "shopperIP": shopperIp
		};
  		
		var callResult = null;
		var service = AdyenHelper.getService(AdyenHelper.SERVICE.PAYMENT_3DSECURE);
		if (service == null) {
			return PIPELET_ERROR;
		}
		
		var resultObject = null;
		service.addHeader("Content-type","application/json"); 
		service.addHeader("charset", "UTF-8");
		callResult = service.call(JSON.stringify(jsonRequest));

		if (callResult.isOk() == false){
			Logger.error("Adyen: Call error code" +  callResult.getError().toString() + " Error => ResponseStatus: " + callResult.getStatus()  + " | ResponseErrorText: " +  callResult.getErrorMessage() + " | ResponseText: " + callResult.getMsg());
			return PIPELET_ERROR;
		}		
		
		resultObject = callResult.object;
  		
		var resultObj : Object = { // build the result object
			statusCode: resultObject.getStatusCode(),
			statusMessage: resultObject.getStatusMessage(),
			text: resultObject.getText(),
			errorText: resultObject.getErrorText(),
			timeout: resultObject.getTimeout()
		}
		
		var resultText : String = resultObj.text;
		if (resultText == null) { return PIPELET_ERROR; }
		
		// build the response object
		var responseObj = JSON.parse(resultText);
		
		// assign default values for the script output variables
		var resultCode = '';
		args.Decision = "ERROR";
		args.PaymentStatus = resultObj.errorText; 
		args.AuthorizationCode = '';
		args.RequestToken = '';
		
		var resultCode = responseObj.resultCode;
		args.RequestToken = responseObj.pspReference;
		args.AuthorizationCode = responseObj.authCode;
		
		if (resultCode.indexOf("Authorised") != -1) {
			args.Decision = "ACCEPT";
			args.PaymentStatus = resultCode;
			Logger.getLogger("Adyen").info ("Payment result: Authorised");
			Logger.getLogger("Adyen").info ("Decision: " + args.Decision);
		}
		else { // if is rejected
			Logger.error("Adyen: Credit card rejected " +  resultObj.statusCode + " Error => ResponseStatus: " +  resultObj.statusMessage + " | ResponseErrorText: " + resultObj.errorText + " | ResponseText: " + resultText);
		}	
		
		args.RequestID = orderNo;
		args.AuthorizationAmount = args.Amount.getValue().toFixed(2);
		
	} 
	catch (e) {
		var error = e;
		if (e instanceof Fault) {
           	Logger.getLogger("Adyen").debug("Adyen: Fault Actor " + e.faultActor + " caused fault [code: '" + e.faultCode + "'] == Error ==> (" + e.faultString + " == Details ==> " + e.faultDetail + ")");
       	}
       	else {
           	Logger.error("Adyen: " + e.toString());
       	}	
		return PIPELET_ERROR;
	}

   	return args;
}

module.exports = {
	'execute': execute,
	'verify': verify
}
