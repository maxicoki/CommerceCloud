/**
* Send request to adyen to get payment methods based on country code
* A signature is calculated based on the configured HMAC code
*

* @input Basket : dw.order.Basket
* @input CountryCode : String
* @output PaymentMethods : Object
*/
importPackage(dw.crypto);
importPackage(dw.system);
importPackage(dw.order);
importPackage(dw.net);
importPackage(dw.util);
importPackage( dw.svc );

//script include
var AdyenHelper = require("int_adyen/cartridge/scripts/util/AdyenHelper");

function execute( args : PipelineDictionary ) : Number
{
	var result = getMethods(args.Basket, args.CountryCode);
	if (result == PIPELET_ERROR) {
		return result;
	}
	args.PaymentMethods = result;
	return PIPELET_NEXT;
}

function getMethods (basket : dw.order.Basket, CountryCode) {
    var skinCode: String = Site.getCurrent().getCustomPreferenceValue("Adyen_skinCode");
    var merchantAccount: String = Site.getCurrent().getCustomPreferenceValue("Adyen_merchantCode");
    var HMACkey: String = Site.getCurrent().getCustomPreferenceValue("Adyen_HMACkey");
    var Mode: String = Site.getCurrent().getCustomPreferenceValue("Adyen_Mode");
    var locale = request.locale;

    if (merchantAccount == null) {
        Logger.getLogger("Adyen").fatal("MERCHANTACCOUNT not set.");
        return PIPELET_ERROR;
    }
    if (skinCode == null) {
        Logger.getLogger("Adyen").fatal("skinCode not set.");
        return PIPELET_ERROR;
    }
    if (HMACkey == null) {
        Logger.getLogger("Adyen").fatal("HMACkey not set.");
        return PIPELET_ERROR;
    }

    var currencyCode: String = basket.currencyCode; 
    var merchantReference: String = "Request payment methods";
    var paymentAmount: Number = basket.getTotalGrossPrice() ? AdyenHelper.getCurrencyValueForApi(basket.getTotalGrossPrice()) : 1000;
	
    //Get country code based on Shipping Address and if it changes on the billing address then the payment methods need to be refreshed
    var shippingAddr : Shipment = basket.defaultShipment.shippingAddress;
    var countryCode = !empty(CountryCode) ? CountryCode.toUpperCase() : shippingAddr.countryCode.value.toUpperCase();

    var sessionValidity: String = new Date();
    sessionValidity.setHours(sessionValidity.getHours() + 1);
    sessionValidity = sessionValidity.toISOString();

    var shipBeforeDate : String = new Date();
    shipBeforeDate.setDate(shipBeforeDate.getDate() + 5);
    shipBeforeDate = shipBeforeDate.toISOString();

    var adyenRequest: SortedMap = new SortedMap();
    adyenRequest.put("paymentAmount", paymentAmount.toFixed(0));
    adyenRequest.put("currencyCode", currencyCode);
    adyenRequest.put("merchantReference", merchantReference);
    adyenRequest.put("skinCode", skinCode);
    adyenRequest.put("merchantAccount", merchantAccount);
    adyenRequest.put("sessionValidity", sessionValidity);
    adyenRequest.put("countryCode", countryCode);
    adyenRequest.put("shipBeforeDate", shipBeforeDate );
    
    if(!empty(locale) && locale != "default") {
    		adyenRequest.put("shopperLocale", locale);
    }

    var keys: String = "";
    var values: String = "";
    var reqBody: String = "";
    for (var key in adyenRequest) {

        keys = keys.concat(key + ":");
        var value = adyenRequest[key];

        reqBody = reqBody.concat(key + "=" + encodeURIComponent(value.toString()) + "&");

        // escape chars
        value = value.toString().replace(/\\/g, "\\\\").replace(/\:/g, "\\:");
        values = values.concat(value + ":");
    }

    values = values.substring(0, values.length - 1);

    var requestString: String = keys.concat(values);

    var keyBytes: Bytes = Encoding.fromHex(HMACkey);
    var c: Mac = Mac(Mac.HMAC_SHA_256);
    var merchantSig: String = Encoding.toBase64(c.digest(requestString, keyBytes));

    reqBody = reqBody.concat("merchantSig=" + encodeURIComponent(merchantSig));

    var callResult = null;
   	var service = AdyenHelper.getService(AdyenHelper.SERVICE.PAYMENTMETHODS);
	if (service == null) {
		return PIPELET_ERROR;
	}
   	
   	var resultObject = null;
   	
   	service.addHeader("Content-type","application/x-www-form-urlencoded"); 
   	callResult = service.call(reqBody);
   	
	if (callResult.isOk() == false){
		Logger.error("Adyen: Call error code" +  callResult.getError().toString() + " Error => ResponseStatus: " + callResult.getStatus()  + " | ResponseErrorText: " +  callResult.getErrorMessage() + " | ResponseText: " + callResult.getMsg());
		return PIPELET_ERROR;
	}
   	resultObject = callResult.object;
	
    return JSON.parse(resultObject.text);
}


module.exports = {
	'execute': execute,
	'getMethods': getMethods
}
