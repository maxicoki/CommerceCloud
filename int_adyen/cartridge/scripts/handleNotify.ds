/**
 * save Adyen Notification
 * see page 22 of Adyen Integration manual
 *
 * v1 110324 : logging to file
 * v2 110325 :
 * v3 110408 : pass on OrderNo, Paymentresult for update
 * v4 130422 : Merged adyen_notify and update_order into single script  
 *
 * @input CurrentHttpParameterMap : Object
 *
 */
importPackage( dw.system );
importPackage( dw.util );
importPackage( dw.value);
importPackage( dw.order);
importPackage( dw.object );  

function execute( args : PipelineDictionary ) : Number
{
	return notify(args.CurrentHttpParameterMap);
}

function notify (hpm) {	
	// Check the input parameters
	if (hpm == null) {
		Logger.getLogger("Adyen", "adyen").fatal("Handling of Adyen notification has failed. No input parameters were provided.");
		return PIPELET_NEXT;
	}

	try {
	
	// Log detailed response to ScriptLog and log file
	var msg : String = createLogMessage(hpm);
	Logger.getLogger("Adyen", "adyen").debug(msg);
	

	var calObj : Calendar = new Calendar();

	//create custom object
	var keyValue : String = hpm.merchantReference.stringValue + "-" + StringUtils.formatCalendar(calObj, "yyyyMMddhhmmss");
	var customObj : CustomObject = CustomObjectMgr.createCustomObject("adyenNotification", keyValue);
	customObj.custom.currency = hpm.currency.stringValue;
	customObj.custom.eventCode = hpm.eventCode.stringValue;
	
	var timeString : String = StringUtils.formatCalendar(calObj, "yyyy-MM-dd'T'hh:mm:ss.sssZ");
  
	customObj.custom.eventDate = timeString;
	customObj.custom.httpRemoteAddress = request.httpRemoteAddress; 
	customObj.custom.live = hpm.live.stringValue;
	customObj.custom.merchantAccountCode = hpm.merchantAccountCode.stringValue;
	customObj.custom.merchantReference = hpm.merchantReference.stringValue;
	customObj.custom.operations = hpm.operations.stringValue;
	customObj.custom.paymentMethod = hpm.paymentMethod.stringValue;
	//custom.processedDate
	//custom.processedStatus
	customObj.custom.pspReference = hpm.pspReference.stringValue;
	customObj.custom.reason = hpm.reason.stringValue;
	customObj.custom.success = hpm.success.stringValue;
	customObj.custom.value = hpm.value.stringValue;
	customObj.custom.version = "4d";
	
	switch(hpm.eventCode.stringValue) {
		case "AUTHORISATION" :
		    // Save all request to custom attribute for Authorization event
			var requestObject = {};
			for each (var paramName in hpm.parameterNames) {
				requestObject[paramName] = hpm[paramName].stringValue;
			}
			customObj.custom.Adyen_log = JSON.stringify(requestObject);
		case "CANCELLATION" :
		case "CANCEL_OR_REFUND" :
		case "REFUND" :
		case "CAPTURE_FAILED" :
		case "ORDER_OPENED" :
		case "ORDER_CLOSED" :
		case "PENDING" :
			customObj.custom.updateStatus = "PROCESS";
			Logger.getLogger("Adyen").info ("Received notification for merchantReference {0} with status {1}. Custom Object set up to 'PROCESS' status.", hpm.merchantReference.stringValue, hpm.eventCode.stringValue);
			break;
		default:
			customObj.custom.updateStatus = "PENDING";
			Logger.getLogger("Adyen").info ("Received notification for merchantReference {0} with status {1}. Custom Object set up to 'PENDING' status.", hpm.merchantReference.stringValue, hpm.eventCode.stringValue);
	} 
	
	} catch(e) {
		var ex = e;
		Logger.getLogger("Adyen", "adyen").error(e.message);
	}
	
	return PIPELET_NEXT;
}

function createLogMessage(hpm){
	var VERSION : String= "4d";
	var msg = "";
	msg = "AdyenNotification v " + VERSION + " - Payment info (Called from : " + request.httpRemoteAddress + ")";
	msg = msg + "\n================================================================\n";
    //msg = msg + "\nSessionID : " + args.CurrentSession.sessionID;
    msg = msg + "reason : " + hpm.reason.stringValue;
	msg = msg + "\neventDate : " + hpm.eventDate.stringValue;
	msg = msg + "\nmerchantReference : " + hpm.merchantReference.stringValue; 
	msg = msg + "\ncurrency : " + hpm.currency.stringValue;
	msg = msg + "\npspReference : " + hpm.pspReference.stringValue;
	msg = msg + "\nmerchantAccountCode : " + hpm.merchantAccountCode.stringValue;
	msg = msg + "\neventCode : " + hpm.eventCode.stringValue;
	msg = msg + "\nvalue : " + hpm.value.stringValue;
	msg = msg + "\noperations : " + hpm.operations.stringValue;
	msg = msg + "\nsuccess : " + hpm.success.stringValue;
	msg = msg + "\npaymentMethod : " + hpm.paymentMethod.stringValue;
	msg = msg + "\nlive : " + hpm.live.stringValue;
	return msg;
}

module.exports = {
	'execute': execute,
	'notify': notify
}