/**
* Script  used to authorize any confirmation call coming from Adyen
*
*
*   @input AuthResult : String
*   @input MerchantReference : String
*	@input PaymentMethod : String
*   @input PspReference : String
*   @input ShopperLocale : String
*   @input SkinCode : String
*   @input MerchantSig : String 
*	@output	Authenticated : Boolean
**	Optional parameter that sent by Adyen in case the original page sends it to Adyen (so it's returned)
*   @input MerchantReturnData : String
**
*	
*
*/
importPackage( dw.crypto );
importPackage( dw.system );
importPackage( dw.util ); 

function execute( args : PipelineDictionary ) : Number
{
	args.Authenticated = authorize(args);
	return PIPELET_NEXT;
}

function authorize( args : PipelineDictionary ) : Boolean {
	if(empty(args.merchantSig))  {
	    return false;
	}
	
	var merchantSig : String = args.merchantSig;
	//Compute the signature from the parameters values and the set hmackey
	var HMACkey : String = Site.getCurrent().getCustomPreferenceValue("Adyen_HMACkey"); 
	
	var keys = new Array();
	var values = new Array();
	
	//sort the keys alphabetically
	var sortedKeys = Object.keys(args).sort();
	for(var key in sortedKeys) {
		var item = sortedKeys[key];
		    var value = args[item];
		    if(item !== "merchantSig" && value !== null) {
				    keys.push(item);
				    // escape chars
				    value = value.toString().replace(/\\/g, "\\\\").replace(/\:/g, "\\:");
				    values.push(value);
		    }
	}
	
	var requestString = keys.join(":") + ":" + values.join(":");
	//error in doc https://documentation.demandware.com/display/DOCAPI2111/dw.crypto.Mac
	var keyBytes : Bytes = Encoding.fromHex(HMACkey);
	var c : Mac = Mac(Mac.HMAC_SHA_256);  
	var signature : String = Encoding.toBase64(c.digest(requestString, keyBytes));
	
	// If the signatures match then the call is authorized
	return merchantSig == signature;
}

module.exports = {
	'execute': execute,
	'authorize': authorize
}