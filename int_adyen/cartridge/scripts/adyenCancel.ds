/**
* Call the Adyen API to cancel order payment
*
* @input Order : dw.order.Order
*
* @output Decision : String
*
*/
importPackage( dw.system );
importPackage( dw.order );
importPackage( dw.util );
importPackage( dw.net);
importPackage( dw.svc );

//script include
var AdyenHelper = require ("int_adyen/cartridge/scripts/util/AdyenHelper");

function execute( args : PipelineDictionary ) : Number
{
	var decision = cancel(args.Order);
	
	if (decision == PIPELET_ERROR){
		args.Decision = "ERROR";
		return PIPELET_ERROR;
	}
	
	args.Decision = decision;
	return PIPELET_NEXT;
}

function cancel( order : Order ) : Number
{
	// Check the input parameters
	if (order == null) {
		Logger.getLogger("Adyen").fatal("Cancellation of order payment has failed. No order was provided.");
		return PIPELET_ERROR;
	}
	
	// Get orderNo which is needed for some functions (error handling)
	var orderNo : String = order.getOrderNo();
	var decision = "ERROR";
	
	// Error handling configuration
	var fatalErrMsgPrefix : String = "Cancellation of payment for order #" + orderNo + " has failed. ";
	
	// Adyen configuration
	var merchantAccount : String = Site.getCurrent().getCustomPreferenceValue("Adyen_merchantCode");
	
	// Check the configuration
	if (merchantAccount == null) {
		Logger.getLogger("Adyen").fatal(fatalErrMsgPrefix + "merchantAccount is not set.");
		return PIPELET_ERROR;
	}
	
	if (endpoint == null) {
		Logger.getLogger("Adyen").fatal(fatalErrMsgPrefix + "Pal service URL is not set.");
		return PIPELET_ERROR;
	}
	
	// Get order values needed for the API call
	var pspReference : String = order.custom.Adyen_pspReference;
	if (pspReference == null) {
		Logger.getLogger("Adyen").fatal(fatalErrMsgPrefix + "PSP reference is not set.");
		return PIPELET_ERROR;
	}
	
	try {
		// Send a request
		var params="action=" + "Payment.cancel" +
			"&modificationRequest.merchantAccount=" + encodeURIComponent(merchantAccount) +
			"&modificationRequest.originalReference=" + encodeURIComponent(pspReference);
		
		var callResult = null;
		//var service : Service = ServiceRegistry.get("adyen.http.payment.send");
		var service = AdyenHelper.getService(AdyenHelper.SERVICE.SEND);
		if (service == null) {
			return PIPELET_ERROR;
		}
		var resultObject = null;
		
		service.addHeader("Content-type","application/x-www-form-URLencoded"); 
		service.addHeader("charset", "UTF-8");
		callResult = service.call(params);

		if (callResult.isOk() == false){
			Logger.error("Adyen: Call error code" +  callResult.getError().toString() + " Error => ResponseStatus: " + callResult.getStatus()  + " | ResponseErrorText: " +  callResult.getErrorMessage() + " | ResponseText: " + callResult.getMsg());
			return PIPELET_ERROR;
		}	
		
		resultObject = callResult.object;
		
		var result : String = resultObject.getText();
		
		// Parse the response
		if (!empty(result)) {
			if (result.indexOf("cancel-received") != -1) {
				// Define the result of script execution
				decision = "SUCCESS";
				
				// Update the order
				order.custom.Adyen_eventCode = "CANCELLATION";
				
				/*
				if (order.paymentStatus != Order.PAYMENT_STATUS_NOTPAID) {
					order.setPaymentStatus(Order.PAYMENT_STATUS_NOTPAID);
				}
				*/
				
				// Log the result of operation
				Logger.getLogger("Adyen").info("Payment modification result for order #" + orderNo + ": Cancellation");
			} else {
				// Define the result of script execution
				decision = "REFUSED";
				
				// Update the order
				order.custom.Adyen_eventCode = "CANCELLATION REFUSED";
				
				// Log the result of operation
				Logger.getLogger("Adyen").info("Payment modification result for order #" + orderNo + ": Cancellation Refused");
			}
		} else {
			// Log the error and exit
			Logger.getLogger("Adyen").fatal(fatalErrMsgPrefix + "The call to Adyen API did not return any result.");
			return PIPELET_ERROR;
		}
	}
	catch (e) {
		// Log the error and exit
		Logger.getLogger("Adyen").fatal(fatalErrMsgPrefix + "An error occurred during the call to Adyen API.");
		return PIPELET_ERROR;
	}
	
   	return decision;
}

module.exports = {
	'execute': execute,
	'cancel': cancel
}